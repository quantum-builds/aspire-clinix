generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ReferralForm {
  id                    String   @id @default(cuid())
  medicalHistoryPdfUrl  String?
  referralDetails       String[]
  treatmentDetails      String?
  patientDateOfBirth    DateTime
  patientAddress        String
  patientEmail          String
  patientPhoneNumber    String
  patientName           String
  other                 String?
  referralPracticeId    String
  referralEmail         String
  referralGDC           String
  referralPhoneNumber   String
  referralName          String
  attendTreatment Boolean
  createdAt             DateTime @default(now())
  
  referralDentistId             String?
  patientId             String?
  referralDentist       Dentist?  @relation(fields: [referralDentistId], references: [id])
  patient               Patient?  @relation(fields: [patientId], references: [id])

  referralRequest       ReferralRequest?

  
  // @@unique([patientId, dentistId])
}


model ReferralRequest{
  id  String @id @default(cuid())
  referralFormId  String  @unique
  assignedDentistId   String
  appointmentId   String   @unique

  assignedDentist Dentist  @relation(fields: [assignedDentistId], references: [id])
  referralForm  ReferralForm @relation(fields: [referralFormId],references: [id])
  appointment       Appointment @relation(fields: [appointmentId],references: [id])
}

model Plan {
  id                 String                @id @default(uuid())
  name               String
  description        String
  price              Float
  validity           Int
  includedTreatments String[]
  discountId         String?
  status             PlanStatus            @default(ACTIVE)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  discounts          Discount?             @relation(fields: [discountId], references: [id])
  users              UserSubscribedPlans[]
}

model Discount {
  id        String       @id @default(uuid())
  type      DiscountType
  value     Float
  expiresAt DateTime
  plans     Plan[]
}

model UserSubscribedPlans {
  userId       String
  planId       String
  subscribedAt DateTime
  plans        Plan     @relation(fields: [planId], references: [id])

  @@unique([userId, planId])
}

model Patient {
  id           String       @id @default(cuid())
  email        String       @unique
  password     String
  fullName     String
  phoneNumber  String       @unique
  country      String?
  dateOfBirth  DateTime?
  gender       GenderType?
  fileUrl      String?

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  cart         Cart?        @relation
  appointments Appointment[]
  reports      Report[]
  appointmentRequest  AppointmentRequests[]

  referralForms ReferralForm[]
}

model Dentist{
  id String @id @default(cuid())
  email String @unique
  password String
  fullName String
  phoneNumber String @unique
  country String?
  dateOfBirth DateTime?
  gender  GenderType?
  gdcNo   String  @unique
  practiceAddress String?
  role    DentistRole
  fileUrl      String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments  Appointment[]
  reports     Report[]
  practices   DentistOnPractice[]

  referralForms ReferralForm[]
  referralRequests ReferralRequest[]
}

model Admin{
  id  String @id @default(cuid())
  fullName  String
  password  String
  email     String  @unique
  phoneNumber String  @unique
  fileUrl      String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Practice{
  id  String @id @default(cuid())
  email   String  @unique
  name  String  @unique
  phoneNumber String @unique  
  postcode  String
  timeZone  String
  town  String
  nhs   Boolean @default(false)
  openingHours  Json
  addressLine1  String 
  addressLine2  String
  logoUrl   String?

  dentists  DentistOnPractice[]
  appointments  Appointment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model DentistOnPractice {
  practice   Practice     @relation(fields: [practiceId], references: [id],onDelete: Cascade)
  practiceId String 
  dentist    Dentist  @relation(fields: [dentistId], references: [id],onDelete: Cascade)
  dentistId  String
  status     PracticeApprovalStatus @default(PENDING)

  @@id([practiceId, dentistId])
}

model AppointmentRequests{
  id String @id @default(cuid())
  patientId   String 
  requestedDate DateTime
  reason  String
  status  AppointmentRequestStatus @default(PENDING)
  note  String?
  fileUrl  String?

  createdAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  patient Patient  @relation(fields: [patientId],references: [id],onDelete: Cascade)
}

model Appointment{
  id String @id @default(cuid())
  practiceId String
  date  DateTime
  startTime   DateTime          
  finishTime     DateTime 
  patientId   String 
  dentistId   String 
  reason  String
  state   AppointmentStatus @default(PENDING)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reports Report[]
  practice  Practice  @relation(fields: [practiceId],references: [id],onDelete: Cascade)
  patient Patient  @relation(fields: [patientId],references: [id],onDelete: Cascade)
  dentist Dentist  @relation(fields: [dentistId],references: [id],onDelete: Cascade)

  referralRequest   ReferralRequest? 
}

model Report{
  id          String   @id @default(cuid())
  dentistId   String
  patientId   String
  appointmentId String
  title       String
  fileUrl     String
  fileType    ResoucrceType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient Patient  @relation(fields: [patientId],references: [id],onDelete: Cascade)
  dentist Dentist  @relation(fields: [dentistId],references: [id],onDelete: Cascade)
  appointment Appointment @relation(fields: [appointmentId],references: [id],onDelete: Cascade)
  @@index([fileType])
}

model Resource{
  id          String   @id @default(cuid())
  title       String
  fileUrl     String
  fileType    ResoucrceType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fileType])
}


model Product {
  id       String     @id @default(cuid())
  name     String     @unique
  productId String    @unique
  price    Float
  stock    Int
  ratings  Float
  imageUrl String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartProducts CartProduct[]
  purchasedProducts PurchasedProduct[]

}

model Cart {
  id           String       @id @default(cuid())
  patient      Patient      @relation(fields: [patientId], references: [id],onDelete: Cascade)
  patientId    String       @unique

  cartProducts CartProduct[]
}

model CartProduct{
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  Cart      Cart     @relation(fields: [cartId], references: [id],onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id],onDelete: Cascade)

  @@unique([cartId, productId])
}

model PurchasedProduct{
  id          String   @id @default(cuid())
  patientId   String
  itemId      String
  productId   String
  productPaymentId String 
  purchaseDate DateTime @default(now())
  quantity    Int
  product     Product  @relation(fields: [itemId], references: [id],onDelete: Cascade)
  payment     ProductPayment @relation(fields: [productPaymentId], references: [id])

  @@unique([productPaymentId,productId])
  @@index([patientId,productId])
}

model ProductPayment{
  id              String        @id @default(cuid())
  patientId       String
  email           String        
  paymentIntent   String        
  amount          Float
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  products        PurchasedProduct[]

  @@unique([email,paymentIntent]) 
}


model Video {
  id          String @id @default(cuid())
  dentistId   String
  patientId   String
  fileContent String
  fileName    String
  fileType    String
}

enum InvoiceStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}



enum PlanStatus {
  ACTIVE
  EXPIRED
  UPCOMING
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PatientTreatmentStatus {
  SCHEDULED 
  PENDING 
  RESCHEDULED
  ONGOING 
  COMPLETED 
  CANCELED 
  NO_SHOW 
  FAILED 
  EXPIRED 
}

// PATIENT ENUMS

enum ResoucrceType {
  VIDEO
  PDF
  IMAGES
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
  REFUND_PENDING
  REFUND_FAILED
}

// enum UserRole {
//   PATIENT
//   DENTIST
//   RECIEVING_DENTIST
//   REFERRING_DENTIST
// }

enum DentistRole {
  DENTIST
  RECIEVING_DENTIST
  REFERRING_DENTIST
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  ARRIVED
  IN_SURGERY
  COMPLETED
  CANCELLED
  DID_NOT_ATTEND
}

enum AppointmentRequestStatus {
  APPROVED
  PENDING
  CANCEL
}

enum UserRoles {
  ADMIN
  PATIENT
  DENTIST
}

enum PracticeApprovalStatus {
  PENDING
  APPROVED
  CANCELLED
}
