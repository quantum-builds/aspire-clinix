generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id               String             @id @default(cuid())
  email            String             @unique
  address          String?
  dateOfBirth      DateTime?
  mobileNumber     String?            @unique
  name             String?
  userId           String             @unique
  Appointment      Appointment[]
  User             User               @relation(fields: [userId], references: [id])
  PatientTreatment PatientTreatment[]
  ReferralForm     ReferralForm[]
  Dentist          Dentist[]          @relation("PatientDentists")
}

model Dentist {
  id                String             @id @default(cuid())
  email             String             @unique
  GDCnumber         String?            @unique
  address           String?
  mobileNumber      String?            @unique
  name              String?
  specialty         String?
  userId            String             @unique
  yearsOfExperience Int?
  Appointment       Appointment[]
  User              User               @relation(fields: [userId], references: [id])
  PatientTreatment  PatientTreatment[]
  ReferralForm      ReferralForm[]
  Patient           Patient[]          @relation("PatientDentists")
}

model ReferralForm {
  id                    String   @id @default(cuid())
  medicalHistory        String?
  createdAt             DateTime @default(now())
  referralDetails       String[]
  treatmentDetails      String?
  DOB                   String
  address               String
  email                 String
  mobileNumber          String
  name                  String
  other                 String?
  referralAddress       String
  referralEmail         String
  referralGDC           String
  referralMobileNumber  String
  referralName          String
  treatMeantAppointment String
  dentistId             String
  patientId             String
  Dentist               Dentist  @relation(fields: [dentistId], references: [id])
  Patient               Patient  @relation(fields: [patientId], references: [id])

  @@unique([patientId, dentistId])
}

model Appointment {
  id                String   @id
  dentistId         String
  appointmentDate   DateTime
  appointmentStatus String?
  patientId         String
  downloadReport    String?
  service           String
  Dentist           Dentist  @relation(fields: [dentistId], references: [id])
  Patient           Patient  @relation(fields: [patientId], references: [id])

  @@unique([dentistId, patientId, appointmentDate])
}

model PatientTreatment {
  id              String    @id
  dentistId       String
  patientId       String
  treatmentId     String
  treatmentDate   DateTime
  treatmentStatus String
  Dentist         Dentist   @relation(fields: [dentistId], references: [id])
  Patient         Patient   @relation(fields: [patientId], references: [id])
  Treatment       Treatment @relation(fields: [treatmentId], references: [id])

  @@unique([patientId, treatmentId, treatmentDate])
}

model Treatment {
  id               String             @id
  name             String             @unique
  description      String
  cost             Decimal            @db.Decimal(10, 2)
  PatientTreatment PatientTreatment[]
}

model User {
  id       String   @id
  email    String   @unique
  password String
  role     String
  Admin    Admin?
  Dentist  Dentist?
  Patient  Patient?
}

model Admin {
  id     String @id
  userId String @unique
  User   User   @relation(fields: [userId], references: [id])
}
